# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tOfNr9dkKT15kOSJblqWhSD2_xzdnHH1
"""

# streamlit_ui.py
import streamlit as st
import pandas as pd
import numpy as np
import time

st.set_page_config(
    page_title="ðŸš„ AI Train Priority Dashboard",
    page_icon="ðŸš†",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("ðŸš„ AI-Powered Train Prioritization")
st.markdown("""
This interactive dashboard shows train prioritization based on **train type**, **delays**, and **urgency score**.
High urgency trains are highlighted and animated for better visualization.
""")

# Sidebar - filters
st.sidebar.header("Filters")
train_type_filter = st.sidebar.multiselect(
    "Select Train Types:",
    options=["RAJDHANI","DURONTO","SHATABDI","SUPERFAST","MAIL EXPRESS","CARGO"],
    default=["RAJDHANI","DURONTO","SHATABDI","SUPERFAST","MAIL EXPRESS","CARGO"]
)

urgency_filter = st.sidebar.slider("Minimum Urgency Score:", 0, 10, 0)

uploaded_file = st.file_uploader("Upload Train CSV", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    # Normalize columns
    df.columns = [c.strip().upper().replace(" ", "_") for c in df.columns]

    # Ensure numeric delays
    df["CLIMATIC_DELAYS_MINS"] = pd.to_numeric(df.get("CLIMATIC_DELAYS_MINS", 0), errors="coerce").fillna(0)

    # Filter trains
    df = df[df["TRAIN_TYPE"].isin(train_type_filter)]
    if "URGENCY_SCORE" in df.columns:
        df = df[df["URGENCY_SCORE"] >= urgency_filter]

    # ==============================
    # Train Animation Section
    # ==============================
    st.subheader("ðŸš† Train Animation Preview")
    top_trains = df.sort_values(by=["URGENCY_SCORE","TRAIN_PRIORITY"], ascending=[False, False]).head(5)

    animation_placeholder = st.empty()
    for step in range(1, 11):
        display_text = ""
        for idx, row in top_trains.iterrows():
            # Animation: emoji moving according to urgency
            display_text += f"{'ðŸš„'*step} {row['TRAIN_NAME']} | Urgency: {row.get('URGENCY_SCORE',0):.1f}\n"
        animation_placeholder.text(display_text)
        time.sleep(0.3)  # animation speed

    # ==============================
    # Train Table Section
    # ==============================
    st.subheader("ðŸ“Š Train Prioritization Table")
    df_sorted = df.sort_values(by=["URGENCY_SCORE","TRAIN_PRIORITY"], ascending=[False, False])
    st.dataframe(
        df_sorted[["TRAIN_NUMBER","TRAIN_NAME","TRAIN_TYPE",
                   "TRAIN_PRIORITY","CLIMATIC_DELAYS_MINS",
                   "URGENCY_SCORE","DURATION_MINS"]].style.background_gradient(
                       subset=["URGENCY_SCORE"], cmap="Reds"
                   )
    )

    # ==============================
    # Metrics Summary Section
    # ==============================
    st.subheader("ðŸ“ˆ Metrics Summary")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Max Urgency", df_sorted['URGENCY_SCORE'].max())
    col2.metric("Min Urgency", df_sorted['URGENCY_SCORE'].min())
    col3.metric("Avg Duration (mins)", int(df_sorted['DURATION_MINS'].mean()))
    col4.metric("Total Trains", len(df_sorted))

    # ==============================
    # Highlight Top 3 Urgent Trains
    # ==============================
    st.subheader("ðŸ”¥ Top 3 High Urgency Trains")
    top3 = df_sorted.head(3)
    for idx, row in top3.iterrows():
        st.markdown(f"<span style='color:red; font-size:18px'>ðŸš„ {row['TRAIN_NAME']} | Urgency: {row['URGENCY_SCORE']:.1f}</span>", unsafe_allow_html=True)
