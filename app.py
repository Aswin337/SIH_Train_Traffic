# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tOfNr9dkKT15kOSJblqWhSD2_xzdnHH1
"""

import streamlit as st
import pandas as pd
import time

st.set_page_config(
    page_title="ðŸš„ AI Train Priority Dashboard",
    page_icon="ðŸš†",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("ðŸš„ AI-Powered Train Prioritization")
st.markdown("""
This dashboard shows train prioritization based on **train type**, **delays**, and **urgency score**.
High urgency trains are highlighted and animated for better visualization.
""")

# ----------------------------
# LOAD PRECOMPUTED PKL FILE
# ----------------------------
df = pd.read_pickle("train_priority.pkl")

# Sidebar Filters
st.sidebar.header("Filters")
train_type_filter = st.sidebar.multiselect(
    "Select Train Types:",
    options=df['TRAIN_TYPE'].unique(),
    default=df['TRAIN_TYPE'].unique()
)
urgency_filter = st.sidebar.slider("Minimum Urgency Score:", 0, 10, 0)

# Apply filters
df_filtered = df[df["TRAIN_TYPE"].isin(train_type_filter)]
df_filtered = df_filtered[df_filtered["URGENCY_SCORE"] >= urgency_filter]

# ----------------------------
# TRAIN ANIMATION
# ----------------------------
st.subheader("ðŸš† Train Animation Preview")
top_trains = df_filtered.head(5)
animation_placeholder = st.empty()
for step in range(1, 11):
    display_text = ""
    for idx, row in top_trains.iterrows():
        display_text += f"{'ðŸš„'*step} {row['TRAIN_NAME']} | Urgency: {row['URGENCY_SCORE']:.1f}\n"
    animation_placeholder.text(display_text)
    time.sleep(0.3)

# ----------------------------
# TRAIN PRIORITIZATION TABLE
# ----------------------------
st.subheader("ðŸ“Š Train Prioritization Table")
st.dataframe(
    df_filtered[["TRAIN_NUMBER","TRAIN_NAME","TRAIN_TYPE",
                 "TRAIN_PRIORITY","CLIMATIC_DELAYS_MINS",
                 "URGENCY_SCORE","DURATION_MINS"]].style.background_gradient(
                     subset=["URGENCY_SCORE"], cmap="Reds"
                 )
)

# ----------------------------
# METRICS SUMMARY
# ----------------------------
st.subheader("ðŸ“ˆ Metrics Summary")
col1, col2, col3, col4 = st.columns(4)
col1.metric("Max Urgency", df_filtered['URGENCY_SCORE'].max())
col2.metric("Min Urgency", df_filtered['URGENCY_SCORE'].min())
col3.metric("Avg Duration (mins)", int(df_filtered['DURATION_MINS'].mean()))
col4.metric("Total Trains", len(df_filtered))

# ----------------------------
# TOP 3 HIGHEST URGENCY TRAINS
# ----------------------------
st.subheader("ðŸ”¥ Top 3 High Urgency Trains")
top3 = df_filtered.head(3)
for idx, row in top3.iterrows():
    st.markdown(f"<span style='color:red; font-size:18px'>ðŸš„ {row['TRAIN_NAME']} | Urgency: {row['URGENCY_SCORE']:.1f}</span>", unsafe_allow_html=True)
